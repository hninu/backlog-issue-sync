{"version":3,"sources":["../src/index.ts","../src/core/backlog/backlogUtils.ts","../src/core/backlog/backlogIssueService.ts","../src/core/backlog/backlogApiClient.ts","../src/utils/Input.ts","../src/closed.ts","../src/edit.ts","../src/open.ts","../src/reopen.ts","../src/utils/Validator.ts"],"sourcesContent":["// Main entry point for the GitHub Action\n// Handles event routing and label-based filtering\n\nimport \"isomorphic-fetch\";\n\nimport * as core from \"@actions/core\";\nimport * as github from \"@actions/github\";\n\nimport { handleClosed } from \"./closed.js\";\nimport { extractBacklogTag } from \"./core/backlog/backlogUtils.js\";\nimport { handleEdit } from \"./edit.js\";\nimport { handleOpen } from \"./open.js\";\nimport { handleReopen } from \"./reopen.js\";\n// biome-ignore lint/style/useImportType: <explanation>\nimport { GithubIssue } from \"./type.js\";\nimport { Input } from \"./utils/Input.js\";\nimport { Validator } from \"./utils/Validator.js\";\n\n/**\n * Main runner for the Action. Dispatches to handlers based on issue event type and label filter.\n */\nexport async function run(): Promise<void> {\n  try {\n    // Get GitHub context and issue data\n    const { payload, repo } = github.context;\n    const issue = payload.issue as GithubIssue;\n\n    console.debug(issue);\n\n    const input = new Input(core);\n    const opts = input.getBacklogOptions();\n\n    // --- validation ---\n\n    const validator = new Validator(issue, opts);\n\n    if (!validator.someIncludeLabels()) {\n      return core.info(\n        \"Skipped: none of the include-labels found on this issue.\",\n      );\n    }\n\n    if (!validator.someIncludeTypes()) {\n      return core.info(\n        \"Skipped: none of the include-types found on this issue.\",\n      );\n    }\n\n    // --- handle issue ---\n\n    // Handle issue reopened event\n    if (issue.state === \"open\" && issue.state_reason === \"reopened\") {\n      const tag = await handleReopen({ issue });\n      return core.info(`Finished handling reopened issue: ${tag}`);\n    }\n\n    // Handle issue opened or edited event\n    if (issue.state === \"open\") {\n      // Check for existing Backlog tag in issue body\n      const existBacklogTag = extractBacklogTag(issue.body || \"\");\n\n      // If no Backlog tag, treat as newly opened\n      if (existBacklogTag === null) {\n        const tag = await handleOpen({ issue, repo });\n        return core.info(`Finished handling opened issue: ${tag}`);\n      }\n\n      // Otherwise, treat as edited\n      const tag = await handleEdit({ issue });\n      return core.info(`Finished handling edited issue: ${tag}`);\n    }\n\n    // Handle issue closed event\n    if (issue.state === \"closed\") {\n      const tag = await handleClosed({ issue });\n      return core.info(`Finished handling closed issue: ${tag}`);\n    }\n  } catch (error) {\n    console.debug(error);\n    core.setFailed(error instanceof Error ? error.message : String(error));\n  }\n}\n\n// Run the main entry point\nrun();\n","// Utility functions for Backlog and GitHub tag handling\n\n/**\n * Extracts `backlog #KEY` from GitHub issue body.\n */\nexport function extractBacklogTag(text: string): string | null {\n  const backlogRegex = /backlog\\s+\\[#([A-Z0-9\\-_]+)\\]\\(.*\\)/i;\n  const match = text.match(backlogRegex);\n  return match ? match[1] : null;\n}\n\n/**\n * Generates a Markdown link for backlog #KEY.\n */\nexport function makeBacklogTag(key: string, host: string): string {\n  const url = `https://${host}/view/${key}`;\n  return `backlog [#${key}](${url})`;\n}\n\n/**\n * Generates a Markdown link for github #KEY.\n */\nexport function makeGithubTag(key: string, url: string): string {\n  return `github [#${key}](${url})`;\n}\n","import type { Issue, Project } from \"backlog-js/dist/types/entity.js\";\nimport type { BacklogOptions, GithubIssue } from \"../../type.js\";\nimport type { BacklogApiClient } from \"./backlogApiClient.js\";\nimport {\n  extractBacklogTag,\n  makeBacklogTag,\n  makeGithubTag,\n} from \"./backlogUtils.js\";\n\n/**\n * Service for Backlog issue operations (business logic and state management).\n */\nexport class BacklogIssueService {\n  /**\n   * Project ID.\n   */\n  private projectId = 0;\n\n  /**\n   * Issue type.\n   */\n  private issueType: Issue.IssueType | undefined;\n\n  /**\n   * Priority.\n   */\n  private priority: Issue.Priority | undefined;\n\n  /**\n   * Initial status.\n   */\n  private initialStatus: Project.ProjectStatus | undefined;\n\n  /**\n   * Completed status.\n   */\n  private completedStatus: Project.ProjectStatus | undefined;\n\n  /**\n   * Constructor.\n   *\n   * @param api Backlog API client.\n   * @param opts Backlog options.\n   */\n  constructor(\n    private api: BacklogApiClient,\n    private opts: BacklogOptions,\n  ) {}\n\n  /**\n   * Initialize project, issue type, priority, and status info.\n   */\n  public async init(): Promise<void> {\n    const projectRes = await this.api.getProject(this.opts.projectIdOrKey);\n    if (projectRes.isErr()) {\n      throw new Error(\n        `Failed to get project (projectIdOrKey: ${this.opts.projectIdOrKey})`,\n      );\n    }\n    this.projectId = projectRes.value.id;\n\n    const issueTypesRes = await this.api.getIssueTypes(this.projectId);\n    if (issueTypesRes.isErr()) {\n      throw new Error(\n        `Failed to get issue types (projectId: ${this.projectId})`,\n      );\n    }\n    const foundType = issueTypesRes.value.find(\n      (t) =>\n        t.name === this.opts.issueTypeIdOrName ||\n        t.id === Number(this.opts.issueTypeIdOrName),\n    );\n    if (!foundType) {\n      throw new Error(\n        `Issue type not found (issueTypeIdOrName: ${this.opts.issueTypeIdOrName})`,\n      );\n    }\n    this.issueType = foundType;\n\n    const prioritiesRes = await this.api.getPriorities();\n    if (prioritiesRes.isErr()) {\n      throw new Error(`Failed to get priorities: ${this.opts.projectIdOrKey}`);\n    }\n    const foundPriority = prioritiesRes.value.find(\n      (p) =>\n        p.name === this.opts.priorityIdOrName ||\n        p.id === Number(this.opts.priorityIdOrName),\n    );\n    if (!foundPriority) {\n      throw new Error(\n        `Priority not found (priorityIdOrName: ${this.opts.priorityIdOrName})`,\n      );\n    }\n    this.priority = foundPriority;\n\n    const statusesRes = await this.api.getProjectStatuses(this.projectId);\n    if (statusesRes.isErr()) {\n      throw new Error(\n        `Failed to get project statuses (projectId: ${this.projectId})`,\n      );\n    }\n    const foundInitial = statusesRes.value.find(\n      (s) =>\n        s.name === this.opts.initialStatusIdOrName ||\n        s.id === Number(this.opts.initialStatusIdOrName),\n    );\n    if (!foundInitial) {\n      throw new Error(\n        `Initial status not found (initialStatusIdOrName: ${this.opts.initialStatusIdOrName})`,\n      );\n    }\n    this.initialStatus = foundInitial;\n\n    const foundCompleted = statusesRes.value.find(\n      (s) =>\n        s.name === this.opts.completedStatusIdOrName ||\n        s.id === Number(this.opts.completedStatusIdOrName),\n    );\n    if (!foundCompleted) {\n      throw new Error(\n        `Completed status not found (completedStatusIdOrName: ${this.opts.completedStatusIdOrName})`,\n      );\n    }\n    this.completedStatus = foundCompleted;\n  }\n\n  /**\n   * Create a Backlog issue from a GitHub issue.\n   *\n   * @param githubIssue GitHub issue.\n   */\n  public async createIssue(githubIssue: GithubIssue): Promise<string> {\n    if (!this.issueType || !this.priority)\n      throw new Error(\n        `Issue type or priority not found (issueTypeIdOrName: ${this.opts.issueTypeIdOrName}, priorityIdOrName: ${this.opts.priorityIdOrName})`,\n      );\n    const githubTag = makeGithubTag(\n      githubIssue.number.toString(),\n      githubIssue.html_url,\n    );\n\n    const createdRes = await this.api.postIssue({\n      projectId: this.projectId,\n      issueTypeId: this.issueType.id,\n      priorityId: this.priority.id,\n      summary: `${this.opts.summaryPrefix || \"\"}${githubIssue.title}`,\n      description: `${githubTag}\\n\\n${githubIssue.body || \"\"}`,\n      // startDate: this.opts.\n      // dueDate:\n    });\n\n    if (createdRes.isErr()) {\n      throw new Error(\n        `Failed to create issue (projectId: ${this.projectId}, issueTypeId: ${this.issueType.id}, priorityId: ${this.priority.id})`,\n      );\n    }\n    return makeBacklogTag(createdRes.value.issueKey, this.opts.host);\n  }\n\n  /**\n   * Update a Backlog issue from a GitHub issue.\n   *\n   * @param githubIssue GitHub issue.\n   */\n  public async updateIssue(\n    githubIssue: GithubIssue,\n  ): Promise<string | undefined> {\n    if (!this.initialStatus)\n      throw new Error(\n        `Initial status not found (initialStatusIdOrName: ${this.opts.initialStatusIdOrName})`,\n      );\n    const key = extractBacklogTag(githubIssue.body || \"\");\n    if (key === null) return undefined;\n    const githubTag = makeGithubTag(\n      githubIssue.number.toString(),\n      githubIssue.html_url,\n    );\n    const replaced = githubIssue.body?.replace(\n      /backlog\\s+\\[#([A-Z0-9\\-_]+)\\]\\(.*\\)/i,\n      githubTag,\n    );\n    const payload = {\n      summary: `${this.opts.summaryPrefix || \"\"}${githubIssue.title}`,\n      description: replaced || \"\",\n      statusId: this.initialStatus.id,\n    };\n    const updatedRes = await this.api.patchIssue(key, payload);\n    if (updatedRes.isErr()) {\n      throw new Error(\n        `Failed to update issue (key: ${key}, statusId: ${this.initialStatus.id})`,\n      );\n    }\n    return makeBacklogTag(key, this.opts.host);\n  }\n\n  /**\n   * Close a Backlog issue.\n   *\n   * @param githubIssue GitHub issue.\n   */\n  public async closeIssue(\n    githubIssue: GithubIssue,\n  ): Promise<string | undefined> {\n    if (!this.completedStatus)\n      throw new Error(\n        `Completed status not found (completedStatusIdOrName: ${this.opts.completedStatusIdOrName})`,\n      );\n    const key = extractBacklogTag(githubIssue.body || \"\");\n    if (key === null) return undefined;\n    const payload = { statusId: this.completedStatus.id };\n    const closedRes = await this.api.patchIssue(key, payload);\n    if (closedRes.isErr()) {\n      throw new Error(\n        `Failed to close issue (key: ${key}, statusId: ${this.completedStatus.id})`,\n      );\n    }\n    return makeBacklogTag(key, this.opts.host);\n  }\n}\n","import backlogjs from \"backlog-js\";\nimport type { Issue, Project } from \"backlog-js/dist/types/entity.js\";\nimport type { BacklogError } from \"backlog-js/dist/types/error.js\";\nimport { type Result, fromPromise } from \"neverthrow\";\nimport type { BacklogOptions } from \"../../type.js\";\n\n/**\n * API wrapper for Backlog REST endpoints. Handles only API communication.\n */\nexport class BacklogApiClient {\n  private backlog: backlogjs.Backlog;\n\n  /**\n   * Initialize the API client with host and API key.\n   * @param opts Options containing host and API key.\n   */\n  constructor(opts: Pick<BacklogOptions, \"host\" | \"apiKey\">) {\n    this.backlog = new backlogjs.Backlog({\n      host: opts.host,\n      apiKey: opts.apiKey,\n    });\n  }\n\n  /**\n   * Fetch project by ID or key.\n   * @param projectIdOrKey Project ID or key.\n   * @returns Project data or error.\n   */\n  async getProject(\n    projectIdOrKey: string,\n  ): Promise<Result<Project.Project, BacklogError>> {\n    return fromPromise(\n      this.backlog.getProject(projectIdOrKey),\n      (e) => e as BacklogError,\n    );\n  }\n\n  /**\n   * Fetch issue types for a project.\n   * @param projectId Project ID.\n   * @returns Issue types or error.\n   */\n  async getIssueTypes(\n    projectId: number,\n  ): Promise<Result<Issue.IssueType[], BacklogError>> {\n    return fromPromise(\n      this.backlog.getIssueTypes(projectId),\n      (e) => e as BacklogError,\n    );\n  }\n\n  /**\n   * Fetch available priorities.\n   * @returns Priorities or error.\n   */\n  async getPriorities(): Promise<Result<Issue.Priority[], BacklogError>> {\n    return fromPromise(this.backlog.getPriorities(), (e) => e as BacklogError);\n  }\n\n  /**\n   * Fetch project statuses.\n   * @param projectId Project ID.\n   * @returns Project statuses or error.\n   */\n  async getProjectStatuses(\n    projectId: number,\n  ): Promise<Result<Project.ProjectStatus[], BacklogError>> {\n    return fromPromise(\n      this.backlog.getProjectStatuses(projectId),\n      (e) => e as BacklogError,\n    );\n  }\n\n  /**\n   * Create a new issue.\n   * @param payload Issue creation payload.\n   * @returns Created issue or error.\n   */\n  async postIssue(\n    payload: backlogjs.Option.Issue.PostIssueParams,\n  ): Promise<Result<Issue.Issue, BacklogError>> {\n    return fromPromise(\n      this.backlog.postIssue(payload),\n      (e) => e as BacklogError,\n    );\n  }\n\n  /**\n   * Update an existing issue.\n   * @param key Issue key.\n   * @param payload Issue update payload.\n   * @returns Updated issue or error.\n   */\n  async patchIssue(\n    key: string,\n    payload: backlogjs.Option.Issue.PatchIssueParams,\n  ): Promise<Result<Issue.Issue, BacklogError>> {\n    return fromPromise(\n      this.backlog.patchIssue(key, payload),\n      (e) => e as BacklogError,\n    );\n  }\n}\n","import * as _core from \"@actions/core\";\nimport actionJson from \"../../action.json\" with { type: \"json\" };\n\ntype Key = keyof typeof actionJson.inputs;\n\nexport class Input {\n  constructor(private readonly core: typeof import(\"@actions/core\") = _core) {}\n\n  // --- PUBLIC ---\n\n  public getBacklogOptions() {\n    return {\n      host: this.getInput(\"backlog-host\", { required: true }),\n      apiKey: this.getInput(\"backlog-api-key\", { required: true }),\n      projectIdOrKey: this.getInput(\"backlog-project-key\", {\n        required: true,\n      }),\n      issueTypeIdOrName: this.getInput(\"backlog-issue-type\", {\n        required: true,\n      }),\n      priorityIdOrName: this.getInput(\"backlog-priority\", {\n        required: true,\n      }),\n      initialStatusIdOrName: this.getInput(\"backlog-initial-status\", {\n        required: true,\n      }),\n      completedStatusIdOrName: this.getInput(\"backlog-completed-status\", {\n        required: true,\n      }),\n      summaryPrefix:\n        this.getInput(\"backlog-summary-prefix\", { required: false }) ||\n        undefined,\n      includeLabels: this.getMultilineInput(\"include-labels\"),\n      includeTypes: this.getMultilineInput(\"include-types\"),\n    };\n  }\n\n  public getAssigneeIdMap(): [string, string][] | null {\n    const input = this.getMultilineInput(\"assignee-id-map\");\n    if (input.length === 0) {\n      return null;\n    }\n    return input\n      .map((line) => {\n        const trimmed = line.trim();\n        const matches = trimmed.match(/@(\\S+)/g);\n        if (matches && matches.length >= 2) {\n          return [matches[0].replace(\"@\", \"\"), matches[1].replace(\"@\", \"\")];\n        }\n        return null;\n      })\n      .filter((pair): pair is [string, string] => pair !== null);\n  }\n\n  public getGithubToken(): string {\n    return this.getInput(\"github-token\", { required: true });\n  }\n\n  public getInput(key: Key, options?: _core.InputOptions) {\n    return this.core.getInput(key, options);\n  }\n\n  public getMultilineInput(key: Key, options?: _core.InputOptions) {\n    return this.core.getMultilineInput(key, options);\n  }\n}\n","import { BacklogIssueService } from \"./core/backlog/index.js\";\nimport { BacklogApiClient } from \"./core/backlog/index.js\";\nimport type { GithubIssue } from \"./type.js\";\nimport { Input } from \"./utils/Input.js\";\n\nexport async function handleClosed({ issue }: { issue: GithubIssue }) {\n  const input = new Input();\n  const opts = input.getBacklogOptions();\n  const api = new BacklogApiClient(opts);\n  const service = new BacklogIssueService(api, opts);\n  await service.init();\n\n  return await service.closeIssue(issue);\n}\n","import { BacklogIssueService } from \"./core/backlog/index.js\";\nimport { BacklogApiClient } from \"./core/backlog/index.js\";\nimport type { GithubIssue } from \"./type.js\";\nimport { Input } from \"./utils/Input.js\";\n\nexport async function handleEdit({ issue }: { issue: GithubIssue }) {\n  const input = new Input();\n  const opts = input.getBacklogOptions();\n  const api = new BacklogApiClient(opts);\n  const service = new BacklogIssueService(api, opts);\n  await service.init();\n\n  return await service.updateIssue(issue);\n}\n","import * as github from \"@actions/github\";\nimport { BacklogIssueService } from \"./core/backlog/index.js\";\nimport { BacklogApiClient } from \"./core/backlog/index.js\";\nimport type { GithubIssue } from \"./type.js\";\nimport { Input } from \"./utils/Input.js\";\n\nexport async function handleOpen({\n  issue,\n  repo,\n}: {\n  issue: GithubIssue;\n  repo: { owner: string; repo: string };\n}) {\n  const input = new Input();\n  const opts = input.getBacklogOptions();\n  const token = input.getGithubToken();\n\n  const octokit = github.getOctokit(token);\n\n  const api = new BacklogApiClient(opts);\n  const service = new BacklogIssueService(api, opts);\n  await service.init();\n\n  // 例外throw型に対応\n  const backlogTag = await service.createIssue(issue);\n\n  const newBody = `${backlogTag}\\n\\n${issue.body || \"\"}`;\n  await octokit.rest.issues.update({\n    owner: repo.owner,\n    repo: repo.repo,\n    issue_number: issue.number,\n    body: newBody,\n  });\n\n  return backlogTag;\n}\n","import { BacklogIssueService } from \"./core/backlog/index.js\";\nimport { BacklogApiClient } from \"./core/backlog/index.js\";\nimport type { GithubIssue } from \"./type.js\";\nimport { Input } from \"./utils/Input.js\";\n\nexport async function handleReopen({ issue }: { issue: GithubIssue }) {\n  const input = new Input();\n  const opts = input.getBacklogOptions();\n  const api = new BacklogApiClient(opts);\n  const service = new BacklogIssueService(api, opts);\n  await service.init();\n  return await service.updateIssue(issue);\n}\n","import type { GithubIssue } from \"../type.js\";\nimport type { BacklogOptions } from \"../type.js\";\n\nexport class Validator {\n  private issue: GithubIssue;\n  private opts: BacklogOptions;\n\n  constructor(issue: GithubIssue, opts: BacklogOptions) {\n    this.issue = issue;\n    this.opts = opts;\n  }\n\n  /**\n   * 指定ラベルが含まれているか判定\n   */\n  someIncludeLabels(): boolean {\n    const includeLabels = this.opts.includeLabels;\n    if (includeLabels.length === 0) return true;\n\n    const labels = (this.issue.labels || []).map((l) =>\n      typeof l === \"string\" ? l : l.name,\n    );\n\n    return labels.some((label) => includeLabels.includes(label));\n  }\n\n  /**\n   * 指定タイプが含まれているか判定\n   */\n  someIncludeTypes(): boolean {\n    const includeTypes = this.opts.includeTypes;\n\n    if (includeTypes.length === 0) return true;\n\n    return includeTypes.some((type) => type === (this.issue.type?.name || \"\"));\n  }\n}\n"],"mappings":"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","names":["github","core","tag"]}